#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$lib = File.expand_path('../lib', File.dirname(__FILE__))
$LOAD_PATH.unshift($lib)

require "ZMediumFetcher"
require "Helper"
require "optparse"

$cookie_sid = nil
$cookie_uid = nil
$open_ai_translator_model = nil
$open_ai_translator_token = nil

class Main
    def initialize
        fetcher = ZMediumFetcher.new
        ARGV << '-h' if ARGV.empty?

        options = {}
        filePath = ENV['PWD'] || ::Dir.pwd
        
        OptionParser.new do |opts|
            opts.banner = "Usage: ZMediumFetcher [options]"
            
            opts.on('-s', '--cookie_sid COOKIESID', 'Your logged-in Medium cookie sid value') do |cookie_sid|
                $cookie_sid = cookie_sid
            end

            opts.on('-d', '--cookie_uid COOKIEUID', 'Your logged-in Medium cookie uid value') do |cookie_uid|
                $cookie_uid = cookie_uid
            end

            opts.on('-u', '--username USERNAME', 'Downloading all posts from user') do |username|
                options[:u] = username
            end
        
            opts.on('-p', '--postURL POST_URL', 'Downloading single post') do |postURL|
                options[:p] = postURL
            end

            opts.on('-j', '--jekyllUsername USERNAME', 'Downloading all posts from user with Jekyll friendly') do |username|
                options[:j] = username
            end
        
            opts.on('-k', '--jekyllPostURL POST_URL', 'Downloading single post with Jekyll friendly') do |postURL|
                options[:k] = postURL
            end

            opts.on('-n', '--new', 'Update to latest version') do
                options[:n] = true
            end

            opts.on('-c', '--clean', 'Remove all downloaded posts data') do
                options[:c] = true
            end

            opts.on('-v', '--version', 'Print current ZMediumToMarkdown Version & Output Path') do
                options[:v] = true
            end

            opts.on('-m', '--open_ai_translator_model MODEL', 'Open AI Model e.g. gpt-4o') do |model|
                $open_ai_translator_model = model
            end

            opts.on('-t', '--open_ai_translator_token TOKEN', 'Open AI API Token') do |token|
                $open_ai_translator_token = token
            end
        end.parse!

        #
        if !options[:v].nil? && options[:v] == true
            puts "Version:#{Helper.getLocalVersion().to_s}"

            Helper.printNewVersionMessageIfExists()
        elsif !options[:c].nil? && options[:c] == true
            outputFilePath = PathPolicy.new(filePath, "")
            FileUtils.rm_rf(Dir[outputFilePath.getAbsolutePath(nil)])
            puts "All downloaded posts data has been removed."

            Helper.printNewVersionMessageIfExists()
        elsif !options[:n].nil? && options[:n] == true
            if Helper.getRemoteVersionFromGithub() > Helper.getLocalVersion()
                Helper.downloadLatestVersion()
            else
                puts "You're using the latest version :)"
            end
        elsif !options[:k].nil?
            postURL = options[:k]

            outputFilePath = PathPolicy.new(filePath, "")
            fetcher.isForJekyll = true
            fetcher.downloadPost(postURL, outputFilePath, nil)

            Helper.printNewVersionMessageIfExists()
        elsif !options[:j].nil?
            username = options[:j]

            outputFilePath = PathPolicy.new(filePath, "")
            fetcher.isForJekyll = true
            fetcher.downloadPostsByUsername(username, outputFilePath)

            Helper.printNewVersionMessageIfExists()
        elsif !options[:p].nil?
            postURL = options[:p]

            outputFilePath = PathPolicy.new("#{filePath}/Output", "Output")
            fetcher.downloadPost(postURL, outputFilePath, nil)

            Helper.printNewVersionMessageIfExists()
        elsif !options[:u].nil?
            username = options[:u]

            outputFilePath = PathPolicy.new("#{filePath}/Output", "Output")
            fetcher.downloadPostsByUsername(username, outputFilePath)

            Helper.printNewVersionMessageIfExists()
        end

    end
end

begin 
    puts "#https://github.com/ZhgChgLi/ZMediumToMarkdown"
    puts "You have read and agree with the Disclaimer."
    Main.new()
    puts "Execute Successfully!!!"
    puts "#https://github.com/ZhgChgLi/ZMediumToMarkdown"
    puts "#Thanks for using this tool."
    puts "#If this is helpful, please help to star the repo or recommend it to your friends."
rescue => e
    puts "#Error: #{e.class} #{e.message}\n"
    puts e.backtrace
    puts "#Please feel free to open an Issue or submit a fix/contribution via Pull Request on:\n"
    puts "#https://github.com/ZhgChgLi/ZMediumToMarkdown\n"
end